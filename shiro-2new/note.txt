1.身份认证需要继承 AuthenticatingRealm 类，并实现其 doGetAuthenticationInfo() 方法
  授权需要继承 AuthorizingRealm 类，并实现其 doGetAuthorizationInfo() 方法
  AuthorizingRealm 类是 AuthenticatingRealm 类的子类，但没有实现 AuthenticatingRealm 类中的 doGetAuthenticationInfo() 方法
  所以“身份认证”和“授权”只需要继承 AuthorizingRealm 类就可以了，同时实现它的两个抽象方法。
2.
------------------------------------
1.为什么使用MD5 盐值加密：
2.如何做到：
（1）在 doGetAuthenticationInfo() 方法返回值创建 SimpleAuthenticationInfo 对象的时候，需要使用 new SimpleAuthenticationInfo(principal,credentials,credentialsSalt,realmName)构造器
（2）使用 ByteSource.Util.bytes() 方法来计算盐值。
（3）盐值需要唯一：一般使用随机字符串 或 userid
（4）使用 new SimpleHash(hashAlgorithmName, credentials, salt, hashIterations) 来计算盐值加密后的密码的值。
-------------------------------------
1.如何把一个字符串加密为MD5
2.替换当前 Realm 的 credentialsMatcher 属性。直接使用 HashedCredentialsMatcher 对象，并设置加密算法即可。

密码的比对：
    通过 AuthenticatingRealm 的 credentialsMatcher 属性来进行的密码的比对。
-------------------------------------
1.获取当前的Subject,调用SecurityUtils.getSubject()；
2.测试当前的用户是否已经被认证，即是否已经登录。调用 Subject 的 isAuthenticated()；
3.若没有被认证，则把用户和密码封装为UsernamePasswordToken对象
 （1）创建一个表单页面
 （2）把请求提交到 SpringMVC的Handler中
 （3）获取用户名和密码
4.执行登录：调用Subject的login(AuthenticationToken)方法
5.自定义Realm方法，从数据库中获取对应的记录，返回给Shiro.
 （1）实际上需要继承 org.apache.shiro.realm.AuthenticatingRealm 类
 （2）实现 AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken var1)方法
6.由shiro完成对密码的比对。